<%- include("../../views/partials/admin/header") %>

    <head>
        <!-- cropperJS CDN -->
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
    </head>


    <section class="content-main">
        <!-- linkcss -->
        <link rel="stylesheet" href="/css/product-add.css">
        <div class="row">
            <div class="col-9">
                <div class="content-header">
                    <h2 class="content-title">Add New Product</h2>
                </div>
            </div>
            <div class="col-lg-6">
                <div class="card mb-4">
                    <div class="card-body">
                        <form method="post" action="/admin/addProducts" enctype="multipart/form-data"
                            onsubmit="return validateForm()">
                            <div class="mb-4">
                                <label for="product_name" class="form-label">Product Name</label>
                                <input type="text" placeholder="Type here" name="productName"
                                    class="form-control border" id="product_name">
                                <div id="productName-error" class="error-message"></div>
                            </div>

                            <div class="col-lg-4 mb-4">
                                <label class="form-label">Brand</label>
                                <select class="form-select border" name="brand">
                                    <% for( let i=0; i < brand.length; i++ ) { %>
                                        <option value="<%=brand[i].brandName%>">
                                            <%=brand[i].brandName%>
                                        </option>
                                        <% } %>
                                </select>
                                <div id="brand-error" class="error-message"></div>
                            </div>

                            <div class="mb-4">
                                <label class="form-label">Full description</label>
                                <textarea placeholder="Type here" id="descriptionid" name="description"
                                    class="form-control border" rows="4"></textarea>
                                <div id="description-error" class="error-message"></div>
                            </div>

                            <div class="row">
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Regular price</label>
                                        <input placeholder="$" name="regularPrice" type="text"
                                            class="form-control border">
                                        <div id="regularPrice-error" class="error-message"></div>
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Sale price</label>
                                        <input placeholder="$" name="salePrice" type="text" class="form-control border">
                                        <div id="salePrice-error" class="error-message"></div>
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Quantity</label>
                                        <input placeholder="" name="quantity" type="text" class="form-control border">
                                        <div id="quantity-error" class="error-message"></div>
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Color</label>
                                        <input name="color" type="text" class="form-control border">
                                        <div id="color-error" class="error-message"></div>
                                    </div>
                                </div>
                            </div>

                            <div class="card mb-4">
                                <div class="card-body">
                                    <div class="row gx-2">
                                        <div class="col-sm-6 mb-3">
                                            <label class="form-label">Category</label>
                                            <select class="form-select border" style="width: 150px;" name="category">
                                                <% for( let i=0; i < cat.length; i++ ) { %>
                                                    <option value="<%=cat[i].name%>">
                                                        <%=cat[i].name%>
                                                    </option>
                                                    <% } %>
                                            </select>
                                            <div id="category-error" class="error-message"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="card mb-2">
                                <div class="card-header">
                                    <h4>Choose images</h4>
                                </div>
                                <div class="border row">
                                    <div id="addedImagesContainer" class="thumbnails-container"></div>
                                </div>

                                <div class="row">
                                    <div class="card-body align-items-center" style="margin-bottom: 20px;">
                                        <img src="" alt="" id="imgView1">
                                        <input class="form-control" type="file" name="images" id="input1"
                                            accept="image/png, image/jpeg, image/jpg" onchange="viewImage(event, 1)">
                                    </div>
                                    <div class="image-cropper d-flex align-items-center"
                                        style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                                        <img src="" id="croppedImg1" alt="">
                                        <button type="button" id="saveButton1" class="btn-sm btn-primary">Save</button>
                                    </div>
                                </div>

                                <!-- Repeat similar blocks for inputs 2, 3, and 4 -->
                                <div class="row">
                                    <div class="card-body align-items-center" style="margin-bottom: 20px;">
                                        <img src="" alt="" id="imgView2">
                                        <input class="form-control" type="file" name="images" id="input2"
                                            accept="image/png, image/jpeg, image/jpg" onchange="viewImage(event, 2)">
                                    </div>
                                    <div class="image-cropper d-flex align-items-center"
                                        style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                                        <img src="" id="croppedImg2" alt="">
                                        <button type="button" id="saveButton2" class="btn-sm btn-primary">Save</button>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="card-body align-items-center" style="margin-bottom: 20px;">
                                        <img src="" alt="" id="imgView3">
                                        <input class="form-control" type="file" name="images" id="input3"
                                            accept="image/png, image/jpeg, image/jpg" onchange="viewImage(event, 3)">
                                    </div>
                                    <div class="image-cropper d-flex align-items-center"
                                        style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                                        <img src="" id="croppedImg3" alt="">
                                        <button type="button" id="saveButton3" class="btn-sm btn-primary">Save</button>
                                    </div>
                                </div>
                                <!-- More rows for other images (input3, input4) -->
                            </div>

                            <div>
                                <button class="btn btn-md rounded font-sm hover-up" type="button"
                                    onclick="validateAndSubmit()">Publish</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.5/dist/sweetalert2.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>

    <script>

        let currentCropper = null;
        function validateAndSubmit() {
            if (validateForm()) {
                Swal.fire({
                    title: 'Are you sure?',
                    text: "Do you want to publish this product?",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, publish it!'
                }).then((result) => {
                    console.log("results",result)
                    if (result.isConfirmed) {
                        Swal.fire(
                            'Published!',
                            'Your product has been added successfully.',
                            'success'
                        ).then(() => {
                            // Submit form via JavaScript to control redirection
                            const form = document.forms[0];
                            const formData = new FormData(form);
                            console.log("form",form)
                            console.log("formdata",formData)

                            fetch(form.action, {
                                method: form.method,
                                body: formData,
                            })
                                .then(response => {
                                    console.log("response",response.status)
                                    if (response.ok) {
                                        // Redirect after successful form submission
                                        window.location.href = '/admin/products';
                                    } else {
                                        
                                        Swal.fire({
                                            icon: 'error',
                                            title: 'Error',
                                            text: 'Failed to publish the product. Please try again.',
                                        });
                                    }
                                })
                                .catch((error) => {
                                    console.log("error",error)
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Error',
                                        text: 'Failed to publish the product. Please try again.',
                                       
                                    });
                                    // console.log(error)
                                });
                        });
                    }
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Fill the details!',
                    text: 'Please check the highlighted fields and try again.',
                });
            }
        }

        function validateForm() {
            clearErrorMessages();

            const name = document.getElementsByName('productName')[0]?.value || '';
            const price = document.getElementsByName('regularPrice')[0]?.value || '';
            const salePrice = document.getElementsByName('salePrice')[0]?.value || '';
            const color = document.getElementsByName('color')[0]?.value || '';
            const category = document.getElementsByName('category')[0]?.value || '';
            const quantity = document.getElementsByName('quantity')[0]?.value || '';
            const images = document.querySelectorAll('input[type="file"]');
            const imagesValid = Array.from(images).some(input => input.files.length > 0);

            let isValid = true;

            if (name.trim() === "") {
                displayErrorMessage('productName-error', 'Please enter a product name.');
                isValid = false;
            }
            if (parseFloat(price) <= 0 || isNaN(price)) {
                displayErrorMessage('regularPrice-error', 'Please enter a valid non-negative price.');
                isValid = false;
            }
            if (salePrice && (parseFloat(salePrice) <= 0 || isNaN(salePrice))) {
                displayErrorMessage('salePrice-error', 'Please enter a valid non-negative sale price.');
                isValid = false;
            }
            if (parseInt(quantity) < 0 || isNaN(quantity)) {
                displayErrorMessage('quantity-error', 'Please enter a valid non-negative quantity.');
                isValid = false;
            }
            if (color.trim() === "") {
                displayErrorMessage('color-error', 'Please select a color.');
                isValid = false;
            }
            if (category.trim() === "") {
                displayErrorMessage('category-error', 'Please select a category.');
                isValid = false;
            }

            images.forEach((input, index) => {
                const file = input.files[0];
                if (file) {
                    const validTypes = ['image/jpeg', 'image/jpg', 'image/png'];
                    const maxSize = 2 * 1024 * 1024; // 2MB

                    if (!validTypes.includes(file.type)) {
                        displayErrorMessage(`images-error`, `Image ${index + 1} must be a JPEG or PNG.`);
                        imagesValid = false;
                    } else if (file.size > maxSize) {
                        displayErrorMessage(`images-error`, `Image ${index + 1} must be smaller than 2MB.`);
                        imagesValid = false;
                    }
                }
            });

            if (!imagesValid) {
                isValid = false;
            }

            return isValid;
        }

        function displayErrorMessage(elementId, message) {
            const element = document.getElementById(elementId);
            if (element) element.innerHTML = message;
        }

        function clearErrorMessages() {
            const errorElements = document.querySelectorAll('.error-message');
            errorElements.forEach(element => element.innerHTML = "");
        }

        function viewImage(event, index) {
            const input = event.target;
            const reader = new FileReader();
            reader.onload = function () {
                const dataURL = reader.result;
                const image = document.getElementById('imgView' + index);
                image.src = dataURL;

                if (currentCropper) {
                    currentCropper.destroy();
                }

                currentCropper = new Cropper(image, {
                    aspectRatio: 1,
                    viewMode: 1,
                    guides: true,
                    background: false,
                    autoCropArea: 1,
                    zoomable: true,
                });

                const cropperContainer = document.querySelector('#croppedImg' + index).parentNode;
                cropperContainer.style.display = 'block';

                const saveButton = document.querySelector('#saveButton' + index);
                saveButton.onclick = async function () {
                    const croppedCanvas = currentCropper.getCroppedCanvas();
                    const croppedImage = document.getElementById('croppedImg' + index);
                    croppedImage.src = croppedCanvas.toDataURL('image/jpeg', 1.0);

                    const fileName = `cropped-img-${Date.now()}-${index}.png`;
                    await croppedCanvas.toBlob(blob => {
                        const input = document.getElementById('input' + index);
                        const imgFile = new File([blob], fileName, { type: 'image/png' });
                        const fileList = new DataTransfer();
                        fileList.items.add(imgFile);
                        input.files = fileList.files;
                    });

                    cropperContainer.style.display = 'none';
                };
            };
            reader.readAsDataURL(input.files[0]);
        }
    </script>